({
    initGetApprover : function(component, event) {
        var action = component.get("c.getApprover");
        action.setCallback(this, function(response){
            if(response.getState() == 'SUCCESS'){
                if(response.getReturnValue() != undefined){      
                    var records =response.getReturnValue();
                    component.set("v.approver1", records[0]);
                    component.set("v.approver2", records[1]);
                }
            }
        });
        $A.enqueueAction(action);
    },
    initGetUserDetails : function(component, event) {
        var action = component.get("c.getUserDetails");
        action.setCallback(this, function(response){
            if(response.getState() == 'SUCCESS'){
                if(response.getReturnValue() != undefined){      
                    var records =response.getReturnValue();
                    component.set("v.isABPaymentManager", response.getReturnValue());
                }
            }
        });
        $A.enqueueAction(action);
    },
    fetchPayments : function(component, event) {
        var startDate = component.get("v.DateDueStart");
        var endDate = component.get("v.DateDueEnd");
        
        if(startDate > endDate){
            alert('Date Due Start is greater than Date Due End');
        }
        else{
            var action = component.get("c.getPayments");
            action.setParams({"DateDueStart":startDate, "DateDueEnd":endDate});
            action.setCallback(this, function(response){
                console.log(response.getState());
                if(response.getState() == 'SUCCESS'){
                    if(response.getReturnValue() != undefined){      
                        component.set("v.columns",[
                            {label:'Payment Id', fieldName:'Name',type:'text',sortable:'true'},
                            {label:'Client Reference', fieldName:'Client_Reference__c',type:'text',sortable:'true'},
                            {label:'Client Status', fieldName:'Client_Status__c',type:'text'},
                            {label:'Amount', fieldName:'Amount_Paid__c', type:'currency', typeAttribute:{currencyCode:'GBP'}, sortable:'true'},
                            {label:'Payment Code', fieldName:'Payment_Code_Name__c',type:'text'},
                            {label:'Payment Type', fieldName:'Payment_Type__c',type:'text'},
                            {label:'Date Due', fieldName:'Date_Due__c',type:'date',sortable:'true'},
                            {label:'Date Paid', fieldName:'Date_Paid__c',type:'date'},
                            {label:'RSABI Category',fieldName:'RSABI_Category__c',type:'text'}
                        ]);
                        component.set("v.paymentRecords", response.getReturnValue());
                    }
                }
            });
            $A.enqueueAction(action);
        }
    },
    
    fetchSAGEPayments : function(component, event) {
        var BatchReferenceLookUp1 = component.get("v.payment.Batch_Reference__c")
        
        var action = component.get("c.getSAGEPayments");
        action.setParams({"BatchReferenceId":BatchReferenceLookUp1});
        action.setCallback(this, function(response){
            console.log(response.getState());
            if(response.getState() == 'SUCCESS'){
                console.log(response.getReturnValue());
                if(response.getReturnValue() != undefined){      
                    component.set("v.SAGEcolumns",[
                        {label:'Payment Id', fieldName:'Name',type:'text',sortable:'true'},
                        {label:'Batch Reference Number', fieldName:'Batch_Reference_Name__c',type:'text',sortable:'true'},
                        {label:'Client Reference', fieldName:'Client_Reference__c',type:'text',sortable:'true'},
                        {label:'Client Status', fieldName:'Client_Status__c',type:'text',sortable:'true'},
                        {label:'Amount', fieldName:'Amount_Paid__c', type:'currency', typeAttribute:{currencyCode:'GBP'}, sortable:'true'},
                        {label:'Payment Code', fieldName:'Payment_Code_Name__c',type:'text',sortable:'true'},
                        {label:'Payment Type', fieldName:'Payment_Type__c',type:'text',sortable:'true'},
                        {label:'Date Paid', fieldName:'Date_Paid__c',type:'date',sortable:'true'},
                        {label:'RSABI Category',fieldName:'RSABI_Category__c',type:'text'}
                    ]);
                    component.set("v.SAGEpaymentRecords", response.getReturnValue());
                }
            }
        });
        $A.enqueueAction(action);
        
    },
    
    fetchBatchPayments : function(component, event) {
        var startDate = component.get("v.BatchDateDueStart");
        var endDate = component.get("v.BatchDateDueEnd");
        
        if(startDate > endDate){
            alert('Date Due Start is greater than Date Due End');
        }
        else{
            var action = component.get("c.getBatchPayments");
            action.setParams({"DateDueStart":startDate, "DateDueEnd":endDate});
            action.setCallback(this, function(response){
                console.log(response.getState());
                if(response.getState() == 'SUCCESS'){
                    if(response.getReturnValue() != undefined){      
                        component.set("v.Batchcolumns",[
                            {label:'Payment Id', fieldName:'Name',type:'text',sortable:'true'},
                            {label:'Client Reference', fieldName:'Client_Reference__c',type:'text',sortable:'true'},
                            {label:'Client Status', fieldName:'Client_Status__c',type:'text'},
                            {label:'Amount', fieldName:'Amount_Paid__c', type:'currency', typeAttribute:{currencyCode:'GBP'}, sortable:'true'},
                            {label:'Payment Code', fieldName:'Payment_Code_Name__c',type:'text'},
                            {label:'Payment Type', fieldName:'Payment_Type__c',type:'text'},
                            {label:'Date Paid', fieldName:'Date_Paid__c',type:'date'},
                            {label:'RSABI Category',fieldName:'RSABI_Category__c',type:'text'}
                            
                        ]);
                        component.set("v.BatchpaymentRecords", response.getReturnValue());
                    }
                }
            });
            $A.enqueueAction(action);
        }
    },
    
    fetchABArchivePayments : function(component, event) {
        var action = component.get("c.getABArchivePayments");
        action.setCallback(this, function(response){
            console.log(response.getState());
            if(response.getState() == 'SUCCESS'){
                if(response.getReturnValue() != undefined){      
                    component.set("v.ABArchivecolumns",[
                        {label:'Client Reference', fieldName:'Client_Reference__c',type:'text',sortable:'true'},
                        {label:'Client Status', fieldName:'Client_Status__c',type:'text'},
                        {label:'Award', fieldName:'Award__c',type:'text'},
                        {label:'Payment Id', fieldName:'linkName',sortable:'true', type: 'url', typeAttributes: { label: { fieldName: 'Name' }, target:'_blank'}},
                        {label:'Payment Code', fieldName:'Payment_Code_Name__c',type:'text'},
                        {label:'Payment Type', fieldName:'Payment_Type__c',type:'text'},
                        {label:'Amount', fieldName:'Amount_Paid__c', type:'currency', typeAttribute:{currencyCode:'GBP'}, sortable:'true'},
                        {label:'Date Due', fieldName:'Date_Due__c',type:'date'},
                        {label:'Date Paid', fieldName:'Date_Paid__c',type:'date'}                        
                    ]);
                    var records =response.getReturnValue();
                    records.forEach(function(record){
                        record.linkName = '/'+record.Id;
                        record.Award__c = record.Award__r.Name;
                    });
                    component.set("v.ABArchivepaymentRecords", records);
                }
            }
        });
        $A.enqueueAction(action);
    },
    
    clearAll: function(component, event) {
        // this method set all tabs to hide and inactive
        var getAllLI = document.getElementsByClassName("customClassForTab");
        var getAllDiv = document.getElementsByClassName("customClassForTabData");
        for (var i = 0; i < getAllLI.length; i++) {
            getAllLI[i].className = "slds-tabs--scoped__item slds-text-title--caps customClassForTab";
            getAllDiv[i].className = "slds-tabs--scoped__content slds-hide customClassForTabData";
        }
    },
    
    generateFiles : function(component, event) {
        var workspaceAPI = component.find("workspace");
        var BACSPaymentDate = component.get("v.BACSPaymentDate");
        var SageBoolean =component.get("v.WithSAGEFile");
        console.log("SAGE File Boolean>> "+SageBoolean);
        console.log("BACS Payment Date>> "+component.get("v.BACSPaymentDate"));
        console.log("Run generateBACSFile Method");
        var action = component.get("c.generateBACSFile");
        action.setParams({
            "selectedPaymentIds": component.get("v.rowsSelected"),
            "BACSPaymentDate": BACSPaymentDate
        });
        action.setCallback(this, function(response){
            console.log("Method Result>> "+response.getState());
            var stringResult = response.getReturnValue();
            console.log("String Result>> "+stringResult);
            if(response.getState() == 'SUCCESS'){
                workspaceAPI.openTab({url: stringResult,focus:false}).catch(function(error){console.log(error);});
                $A.get('e.force:refreshView').fire();
            }
        });
        $A.enqueueAction(action);
    },
    
    generateBACSSAGEFiles : function(component, event) {
        var workspaceAPI = component.find("workspace");
        var BACSPaymentDate = component.get("v.BACSPaymentDate");
        var SageBoolean =component.get("v.WithSAGEFile");
        console.log("SAGE File Boolean>> "+SageBoolean);
        console.log("BACS Payment Date>> "+component.get("v.BACSPaymentDate"));
        console.log("Run generateBACSFile Method");
        var action1 = component.get("c.generateBACSFile");
        action1.setParams({
            "selectedPaymentIds": component.get("v.rowsSelected"),
            "BACSPaymentDate": BACSPaymentDate
        });
        action1.setCallback(this, function(response){
            console.log("Method Result>> "+response.getState());
            var stringResult = response.getReturnValue();
            console.log("String Result>> "+stringResult);
            if(response.getState() == 'SUCCESS'){
                workspaceAPI.openTab({url: stringResult,focus:false}).catch(function(error){console.log(error);});
                $A.enqueueAction(action2);
            }
        });
        var action2 = component.get("c.generateSAGEFile");
        console.log("RUN generateSAGEFile>> ");
        action2.setParams({
            "selectedPaymentIds": component.get("v.SAGErowsSelected")});
        action2.setCallback(this, function(response){
            console.log("Method state>> "+response.getState());
            var stringResult = response.getReturnValue();
            console.log("String result>> "+stringResult);
            if(response.getState() == 'SUCCESS'){
                workspaceAPI.openTab({
                    url: stringResult,
                    focus: false
                }).catch(function(error) {
                    console.log(error);
                });
                $A.get('e.force:refreshView').fire();
            }
        });
        
        $A.enqueueAction(action1);
    },
    
    generateSAGEFiles : function(component, event) {
        var workspaceAPI = component.find("workspace");
        var action = component.get("c.generateSAGEFile");
        console.log("RUN generateSAGEFile>> ");
        action.setParams({
            "selectedPaymentIds": component.get("v.SAGErowsSelected")});
        action.setCallback(this, function(response){
            console.log("Method state>> "+response.getState());
            var stringResult = response.getReturnValue();
            console.log("String result>> "+stringResult);
            if(response.getState() == 'SUCCESS'){
                workspaceAPI.openTab({
                    url: stringResult,
                    focus: false
                }).then(function(response) {
                    component.set("v.paymentTabId",response);
                }).catch(function(error) {
                    console.log(error);
                });
                $A.get('e.force:refreshView').fire();
            }
        });
        $A.enqueueAction(action);
    },
    
    generateBatchRecord : function(component, event) {
        var action = component.get("c.generateBatchFile");
        console.log("RUN generateBatchRecord>> ");
        console.log("ROWS SELECTED ON BATCH>> "+component.get("v.BatchrowsSelected"));
        action.setParams({
            "selectedPaymentIds": component.get("v.BatchrowsSelected")});
        action.setCallback(this, function(response){
            console.log("Method state>> "+response.getState());
            var stringResult = response.getReturnValue();
            console.log("String result>> "+stringResult);
            if(response.getState() == 'SUCCESS'){

                $A.get('e.force:refreshView').fire();
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    title: "Success!",
                    message: "Batch Reference has been created.",
                    type: "success"
                });
                toastEvent.fire();
                
            }
        });
        $A.enqueueAction(action);
    },
    
    verifyABCreationAllowance : function(component, event) {
        var action = component.get("c.verifyABCreationAllowance");
        action.setParams({
                    "allowanceId": component.get("v.award.Allowance__c")
                });
        action.setCallback(this, function(response){
            console.log(response.getState());
            if(response.getState() == 'SUCCESS'){
                var isActiveAllowance = response.getReturnValue();
                if(isActiveAllowance){
                    component.set("v.ABCreationNotification", "You are about to generate annual ab payments. Do you wish to proceed?");
                    component.set("v.ABCreationShowModal", true);
                    component.set("v.ABProceedButton", true);

                }else{
                    component.set("v.ABCreationNotification", "You have selected an inactive Allowance record. Please select an active Allowance record before proceeding.");
                    component.set("v.ABCreationShowModal", true);
                    component.set("v.ABProceedButton", false);
                }
            }
        });
        $A.enqueueAction(action);
    },
    
    generateABCreationPayments : function(component, event) {
        var action = component.get("c.generateAGAndAward");
        console.log("RUN generateAGAndAward>> ");
        action.setParams({
                    "FirstDateDue": component.get("v.ABCreationFirstDateDue"),
                    "LastDateDue": component.get("v.ABCreationLastDateDue"),
                    "singleAllowanceId": component.get("v.award.Allowance__c")
                });
        action.setCallback(this, function(response){
            console.log("Method state>> "+response.getState());
            var stringResult = response.getReturnValue();
            console.log("String result>> "+stringResult);
            if(response.getState() == 'SUCCESS'){
                $A.get('e.force:refreshView').fire();
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    title: "Success!",
                    message: "The record creation process has commenced and will be complete within a few seconds",
                    type: "success"
                });
                toastEvent.fire();
            }
        });
        $A.enqueueAction(action);
    },
    
    archivePayments : function(component, event) {
        var action = component.get("c.archivePayments");
        action.setParams({
            "selectedPaymentIds": component.get("v.ABArchiverowsSelected")});
        action.setCallback(this, function(response){
            console.log("Method state>> "+response.getState());
            var stringResult = response.getReturnValue();
            console.log("String result>> "+stringResult);
            if(response.getState() == 'SUCCESS'){
                component.set("v.ABArchivepaymentRecords",null);
                component.set("v.ABArchiveselectedRows",null);
                component.set("v.ABArchiverowsSelected",null);
                component.set("v.ABArchivecolumns",null);
                $A.get('e.force:refreshView').fire();
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    title: "Success!",
                    message: "Archive completed successfully.",
                    type: "success"
                });
                toastEvent.fire();
                
            }
        });
        $A.enqueueAction(action);
    },
    
    sortData: function (cmp, fieldName, sortDirection) {
        var data = cmp.get("v.paymentRecords");
        var reverse = sortDirection !== 'asc';
        //sorts the rows based on the column header that's clicked
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.paymentRecords", data);
    },
    sortSAGEData: function (cmp, fieldName, sortDirection) {
        var data = cmp.get("v.SAGEpaymentRecords");
        var reverse = sortDirection !== 'asc';
        //sorts the rows based on the column header that's clicked
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.SAGEpaymentRecords", data);
    },
    sortBatchData: function (cmp, fieldName, sortDirection) {
        var data = cmp.get("v.BatchpaymentRecords");
        var reverse = sortDirection !== 'asc';
        //sorts the rows based on the column header that's clicked
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.BatchpaymentRecords", data);
    },
    sortABArchiveData: function (cmp, fieldName, sortDirection) {
        var data = cmp.get("v.ABArchivepaymentRecords");
        var reverse = sortDirection !== 'asc';
        //sorts the rows based on the column header that's clicked
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.ABArchivepaymentRecords", data);
    },
    sortBy: function (field, reverse, primer) {
        var key = primer ?
            function(x) {return primer(x[field])} :
        function(x) {return x[field]};
        //checks if the two rows should switch places
        reverse = !reverse ? 1 : -1;
        return function (a, b) {
            return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
        }
    }
})
